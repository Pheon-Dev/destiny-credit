// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Account {
  id                       String   @id @default(uuid())
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?  @db.Text
  access_token             String?  @db.Text
  refresh_token_expires_in Int?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?  @db.Text
  session_state            String?
  oauth_token_secret       String?
  oauth_token              String?
  user                     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
}

model User {
  id                  String        @id @default(uuid())
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  username            String?
  name                String?
  image               String?
  email               String?       @unique
  emailVerified       DateTime?
  state               String?
  password            String?
  firstName           String?
  lastName            String?
  role                String?       @default("CO")
  accounts            Account[]
  sessions            Session[]
  registeredMembers   Member[]      @relation("RegisteredBy")
  approvedMembers     Member[]      @relation("ApprovedBy")
  updatedMembers      Member[]      @relation("UpdatedBy")
  officiatesLoans     Loan[]        @relation("CreditOfficer")
  maintainedLoans     Loan[]        @relation("MaintainedBy")
  approvedLoans       Loan[]        @relation("ApprovedBy")
  disbursedLoans      Loan[]        @relation("DisbursedBy")
  updatedLoans        Loan[]        @relation("UpdatedBy")
  handledTransactions Transaction[] @relation("HandledBy")
  updatedTransactions Transaction[] @relation("UpdatedBy")
  handledPayments     Payment[]     @relation("HandledBy")
  updatedPayments     Payment[]     @relation("UpdatedBy")
  createdGroups       Group[]       @relation("CreatedBy")
  approvedGroups      Group[]       @relation("ApprovedBy")
  updatedGroups       Group[]       @relation("UpdatedBy")
  createdProducts     Product[]     @relation("CreatedBy")
  approvedProducts    Product[]     @relation("ApprovedBy")
  updatedProducts     Product[]     @relation("UpdatedBy")
  updatedCollaterals  Collateral[]  @relation("UpdatedBy")
  updatedGuarantors   Guarantor[]   @relation("UpdatedBy")

  @@index(fields: [id, email, username])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Member {
  id                    String       @id @default(uuid())
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt
  date                  String
  branchName            String
  memberId              String
  firstName             String
  lastName              String
  dob                   String
  idPass                String
  kraPin                String
  phoneNumber           String
  gender                String
  age                   String
  religion              String
  maritalStatus         String
  spouseName            String
  spouseNumber          String
  postalAddress         String
  postalCode            String
  cityTown              String
  residentialAddress    String
  emailAddress          String
  rentedOwned           String
  landCareAgent         String
  occupationEmployer    String
  employerNumber        String
  businessLocation      String
  businessAge           String
  refereeName           String
  refereeNumber         String
  communityPosition     String
  mpesaCode             String
  membershipAmount      String
  nameKin               String
  relationship          String
  residentialAddressKin String
  postalAddressKin      String
  postalCodeKin         String
  cityTownKin           String
  numberKin             String
  activeLoan            Boolean?
  loans                 Loan[]
  leader                Group[]      @relation("LedBy")
  initiator             Group[]      @relation("InitiatedBy")
  group                 Group?       @relation("Group", fields: [groupId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  groupId               String?
  collaterals           Collateral[]
  guarantor             Guarantor[]
  ratings               Int          @default(0)
  maintained            Boolean      @default(false)
  registrar             User?        @relation("RegisteredBy", fields: [registrarId], references: [id])
  registrarId           String?
  approver              User?        @relation("ApprovedBy", fields: [approverId], references: [id])
  approverId            String?
  updater               User?        @relation("UpdatedBy", fields: [updaterId], references: [id])
  updaterId             String?

  @@index(fields: [id, firstName, lastName])
}

model Guarantor {
  id                    String   @id @default(uuid())
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  guarantorName         String
  guarantorPhone        String
  guarantorID           String
  guarantorRelationship String
  member                Member   @relation(fields: [memberId], references: [id])
  memberId              String
  updater               User?    @relation("UpdatedBy", fields: [updaterId], references: [id])
  updaterId             String?
  guaranteedLoan        Loan[]

  @@index(fields: [id, memberId])
}

model Collateral {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  item      String
  value     String
  member    Member   @relation(fields: [memberId], references: [id])
  memberId  String
  updater   User?    @relation("UpdatedBy", fields: [updaterId], references: [id])
  updaterId String?

  @@index(fields: [id, memberId])
}

model Loan {
  id               String    @id @default(uuid())
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  maintained       Boolean   @default(false)
  approved         Boolean   @default(false)
  disbursed        Boolean   @default(false)
  defaulted        Boolean?  @default(false)
  cleared          Boolean?  @default(false)
  phone            String?
  principal        String
  interest         String
  installment      String
  penalty          String
  sundays          String
  payoff           String
  tenure           String
  grace            String
  productName      String
  memberName       String
  processingFee    String
  cycle            String
  loanRef          String?
  disbursedOn      String?
  startDate        String?
  paymentCounter   String?
  paymentCount     String?
  paymentDay       String?
  paymentStatus    String?
  paymentPenalties String?
  payment          Payment[]
  member           Member    @relation(fields: [memberId], references: [id])
  memberId         String
  product          Product   @relation(fields: [productId], references: [id])
  productId        String
  guarantor        Guarantor @relation(fields: [guarantorId], references: [id])
  guarantorId      String
  creditOfficer    User?     @relation("CreditOfficer", fields: [creditOfficerId], references: [id])
  creditOfficerId  String?
  maintainer       User?     @relation("MaintainedBy", fields: [maintainerId], references: [id])
  maintainerId     String?
  approver         User?     @relation("ApprovedBy", fields: [approverId], references: [id])
  approverId       String?
  disburser        User?     @relation("DisbursedBy", fields: [disburserId], references: [id])
  disburserId      String?
  updater          User?     @relation("UpdatedBy", fields: [updaterId], references: [id])
  updaterId        String?

  @@index(fields: [id, memberId, productId, cleared])
}

model Payment {
  id            String   @id @default(uuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  total         Int?     @default(0)
  amount        Int      @default(0)
  outsArrears   Int      @default(0)
  paidArrears   Int      @default(0)
  outsPenalty   Int      @default(0)
  paidPenalty   Int      @default(0)
  outsInterest  Int      @default(0)
  paidInterest  Int      @default(0)
  outsPrincipal Int      @default(0)
  paidPrincipal Int      @default(0)
  outsBalance   Int      @default(0)
  currInstDate  String
  nextInstDate  String?
  mpesa         String?
  type          String?
  loan          Loan     @relation(fields: [loanId], references: [id])
  loanId        String
  handler       User?    @relation("HandledBy", fields: [handlerId], references: [id])
  handlerId     String?
  updater       User?    @relation("UpdatedBy", fields: [updaterId], references: [id])
  updaterId     String?

  @@index(fields: [id, loanId])
}

model Product {
  id             String   @id @default(uuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  productId      String
  productName    String
  minimumRange   String
  maximumRange   String
  interestRate   String
  frequency      String
  maximumTenure  String
  repaymentCycle String
  processingFee  String
  gracePeriod    String
  penaltyRate    String
  penaltyCharge  String
  approved       Boolean  @default(false)
  penaltyPayment String
  creator        User?    @relation("CreatedBy", fields: [creatorId], references: [id])
  creatorId      String?
  approver       User?    @relation("ApprovedBy", fields: [approverId], references: [id])
  approverId     String?
  updater        User?    @relation("UpdatedBy", fields: [updaterId], references: [id])
  updaterId      String?
  Loan           Loan[]

  @@index(fields: [id])
}

model Group {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  groupName   String
  groupRef    String
  members     Member[] @relation("Group")
  leader      Member?  @relation("LedBy", fields: [leaderId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  leaderId    String?
  initiator   Member?  @relation("InitiatedBy", fields: [initiatorId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  initiatorId String?
  creator     User?    @relation("CreatedBy", fields: [creatorId], references: [id])
  creatorId   String?
  approver    User?    @relation("ApprovedBy", fields: [approverId], references: [id])
  approverId  String?
  updater     User?    @relation("UpdatedBy", fields: [updaterId], references: [id])
  updaterId   String?
  state       String?

  @@index(fields: [id])
}

model Transaction {
  id                String   @id @default(uuid())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  transactionType   String
  transID           String
  transTime         String
  transAmount       String
  businessShortCode String
  billRefNumber     String
  invoiceNumber     String
  orgAccountBalance String
  thirdPartyTransID String
  msisdn            String
  firstName         String
  middleName        String
  lastName          String
  state             String?
  payment           String?
  updater           User?    @relation("UpdatedBy", fields: [updaterId], references: [id])
  updaterId         String?
  handler           User?    @relation("HandledBy", fields: [handlerId], references: [id])
  handlerId         String?

  @@index(fields: [id, transID, firstName, lastName])
}
