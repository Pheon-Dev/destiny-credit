// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// https://excalidraw.com/#json=UlTwQ8RuSsDuHzC2ZT1Hs,rLKqjYar2u0RTqAcPzBZ-Q

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Account {
  id                       String   @id @default(cuid())
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?  @db.Text
  access_token             String?  @db.Text
  refresh_token_expires_in Int?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?  @db.Text
  session_state            String?
  oauth_token_secret       String?
  oauth_token              String?
  user                     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
}

model User {
  id            String     @id @default(cuid())
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  name          String?
  email         String?    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  loans         Loans[]
  members       Members[]
  products      Products[]
  payments      Payments[]
  role          Role       @default(USER)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// model Profile {
//   id        String   @id @default(uuid())
//   bio  String @db.Text
//     user User @relation(fields: [userId], references: [id], onDelete: Cascade)
//   userId      Int @unique
//
//   @@index(id)
// }

model Members {
  id                    String   @id @default(uuid())
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  date                  String
  branchName            String
  firstName             String
  lastName              String
  dob                   String
  idPass                String
  kraPin                String
  phoneNumber           String
  gender                String
  age                   String
  religion              String
  maritalStatus         String
  spouseName            String
  spouseNumber          String
  postalAddress         String
  postalCode            String
  cityTown              String
  residentialAddress    String
  emailAddress          String
  rentedOwned           String
  landCareAgent         String
  occupationEmployer    String
  employerNumber        String
  businessLocation      String
  businessAge           String
  refereeName           String
  refereeNumber         String
  communityPosition     String
  mpesaCode             String
  membershipAmount      String
  nameKin               String
  relationship          String
  residentialAddressKin String
  postalAddressKin      String
  postalCodeKin         String
  cityTownKin           String
  numberKin             String
  loans                 Loans[]
  group                 Boolean  @default(false)
  ratings               Int      @default(0)
  maintained            Boolean  @default(false)
  user                  User?    @relation(fields: [memberId], references: [id])
  memberId              String

  @@index(id)
}

model Loans {
  id         String     @id @default(uuid())
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  startDate  String
  endDate    String
  maintained Boolean    @default(false)
  approved   Boolean    @default(false)
  disbursed  Boolean    @default(false)
  product    String
  loanId     String
  payment    Payments[]
  member     Members    @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId   String
  user       User?      @relation(fields: [userId], references: [id])
  userId     String?

  @@index([memberId])
}

model Payments {
  id             String         @id @default(uuid())
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  paymentId      String
  transactionsId String
  transactions   Transactions[]
  loan           Loans          @relation(fields: [loanId], references: [id])
  loanId         String
  user           User?          @relation(fields: [userId], references: [id])
  userId         String?

  @@index([loanId])
}

model Products {
  id             String   @id @default(uuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  productId      String
  productName    String
  minimumRange   String
  maximumRange   String
  interestRate   String
  frequency      String
  maximumTenure  String
  repaymentCycle String
  processingFee  String
  gracePeriod    String
  penaltyRate    String
  penaltyCharge  String
  approved       Boolean  @default(false)
  penaltyPayment String
  user           User?    @relation(fields: [userId], references: [id])
  userId         String?

  @@index([userId])
}

model Transactions {
  id                String    @id @default(uuid())
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  transactionType   String
  transID           String
  transTime         String
  transAmount       String
  businessShortCode String
  billRefNumber     String
  invoiceNumber     String
  orgAccountBalance String
  thirdPartyTransID String
  msisdn            String
  firstName         String
  middleName        String
  lastName          String
  payments          Payments? @relation(fields: [paymentsId], references: [id])
  paymentsId        String?

  @@index([paymentsId])
}

enum Role {
  USER
  ADMIN
}
