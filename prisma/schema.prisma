// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Account {
  id                       String   @id @default(uuid())
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?  @db.Text
  access_token             String?  @db.Text
  refresh_token_expires_in Int?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?  @db.Text
  session_state            String?
  oauth_token_secret       String?
  oauth_token              String?
  user                     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
}

model User {
  id                 String       @id @default(uuid())
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  username           String?
  email              String?      @unique
  password           String?
  emailVerified      DateTime?
  image              String?
  accounts           Account[]
  sessions           Session[]
  registeredMembers  Member[]     @relation("RegisteredBy")
  approvedMembers    Member[]     @relation("ApprovedBy")
  updatedMembers     Member[]     @relation("UpdatedBy")
  maintainedLoans    Loan[]       @relation("MaintainedBy")
  approvedLoans      Loan[]       @relation("ApprovedBy")
  disbursedLoans     Loan[]       @relation("DisbursedBy")
  updatedLoans       Loan[]       @relation("UpdatedBy")
  handledPayments    Payment[]    @relation("HandledBy")
  updatedPayments    Payment[]    @relation("UpdatedBy")
  createdProducts    Product[]    @relation("CreatedBy")
  approvedProducts   Product[]    @relation("ApprovedBy")
  updatedProducts    Product[]    @relation("UpdatedBy")
  updatedCollaterals Collateral[] @relation("UpdatedBy")
  updatedGuarantors  Guarantor[]  @relation("UpdatedBy")
  role               Role         @default(USER)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Member {
  id                    String       @id @default(uuid())
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt
  date                  String
  branchName            String
  memberId              String
  firstName             String
  lastName              String
  dob                   String
  idPass                String
  kraPin                String
  phoneNumber           String
  gender                String
  age                   String
  religion              String
  maritalStatus         String
  spouseName            String
  spouseNumber          String
  postalAddress         String
  postalCode            String
  cityTown              String
  residentialAddress    String
  emailAddress          String
  rentedOwned           String
  landCareAgent         String
  occupationEmployer    String
  employerNumber        String
  businessLocation      String
  businessAge           String
  refereeName           String
  refereeNumber         String
  communityPosition     String
  mpesaCode             String
  membershipAmount      String
  nameKin               String
  relationship          String
  residentialAddressKin String
  postalAddressKin      String
  postalCodeKin         String
  cityTownKin           String
  numberKin             String
  loans                 Loan[]
  collaterals           Collateral[]
  guarantor             Guarantor[]
  group                 Boolean      @default(false)
  ratings               Int          @default(0)
  maintained            Boolean      @default(false)
  registrar             User?        @relation("RegisteredBy", fields: [registrarId], references: [id])
  registrarId           String?
  approver              User?        @relation("ApprovedBy", fields: [approverId], references: [id])
  approverId            String?
  updater               User?        @relation("UpdatedBy", fields: [updaterId], references: [id])
  updaterId             String?

  @@index(id)
}

model Guarantor {
  id                    String   @id @default(uuid())
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  guarantorName         String
  guarantorPhone        String
  guarantorId           String
  guarantorRelationship String
  member                Member   @relation(fields: [memberId], references: [id])
  memberId              String
  updater               User?    @relation("UpdatedBy", fields: [updaterId], references: [id])
  updaterId             String?
  Loan                  Loan[]

  @@index(id)
}

model Collateral {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  item      String
  value     String
  member    Member   @relation(fields: [memberId], references: [id])
  memberId  String
  updater   User?    @relation("UpdatedBy", fields: [updaterId], references: [id])
  updaterId String?

  @@index(id)
}

model Loan {
  id            String    @id @default(uuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  maintained    Boolean   @default(false)
  approved      Boolean   @default(false)
  disbursed     Boolean   @default(false)
  principal     String
  interest      String
  installment   String
  penalty       String
  sundays       String
  payoff        String
  tenure        String
  grace         String
  productName   String
  memberName    String
  processingFee String
  cycle         String
  guarantor     Guarantor @relation(fields: [guarantorId], references: [id])
  guarantorId   String
  payment       Payment[]
  product       Product   @relation(fields: [productId], references: [id])
  productId     String
  member        Member    @relation(fields: [memberId], references: [id])
  memberId      String
  maintainer    User?     @relation("MaintainedBy", fields: [maintainerId], references: [id])
  maintainerId  String?
  approver      User?     @relation("ApprovedBy", fields: [approverId], references: [id])
  approverId    String?
  disburser     User?     @relation("DisbursedBy", fields: [disburserId], references: [id])
  disburserId   String?
  updater       User?     @relation("UpdatedBy", fields: [updaterId], references: [id])
  updaterId     String?

  @@index(id)
}

model Payment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  paymentId String
  loan      Loan     @relation(fields: [loanId], references: [id])
  loanId    String
  handler   User?    @relation("HandledBy", fields: [handlerId], references: [id])
  handlerId String?
  updater   User?    @relation("UpdatedBy", fields: [updaterId], references: [id])
  updaterId String?

  @@index(id)
}

model Product {
  id             String   @id @default(uuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  productId      String
  productName    String
  minimumRange   String
  maximumRange   String
  interestRate   String
  frequency      String
  maximumTenure  String
  repaymentCycle String
  processingFee  String
  gracePeriod    String
  penaltyRate    String
  penaltyCharge  String
  approved       Boolean  @default(false)
  penaltyPayment String
  creator        User?    @relation("CreatedBy", fields: [creatorId], references: [id])
  creatorId      String?
  approver       User?    @relation("ApprovedBy", fields: [approverId], references: [id])
  approverId     String?
  updater        User?    @relation("UpdatedBy", fields: [updaterId], references: [id])
  updaterId      String?
  Loan           Loan[]

  @@index(id)
}

model Transaction {
  id                String   @id @default(uuid())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  transactionType   String
  transID           String
  transTime         String
  transAmount       String
  businessShortCode String
  billRefNumber     String
  invoiceNumber     String
  orgAccountBalance String
  thirdPartyTransID String
  msisdn            String
  firstName         String
  middleName        String
  lastName          String

  @@index(id)
}

enum Role {
  USER
  ADMIN
  SUPAERADMIN
}
